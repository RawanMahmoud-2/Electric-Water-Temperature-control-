
HEATER_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000d2e  00000dc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080006c  0080006c  00000dce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c83  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c69  00000000  00000000  00002cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d5  00000000  00000000  00003930  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000434  00000000  00000000  00004b08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088d  00000000  00000000  00004f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001112  00000000  00000000  000057c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  000068db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 bb 04 	jmp	0x976	; 0x976 <__vector_10>
  2c:	0c 94 94 04 	jmp	0x928	; 0x928 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  8a:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <timer_callback>:

volatile u8 SET_ON = 0;
volatile u16 timer = 5000;  // Timer to track 5s timeout
// SET-MODE OFF IF BUTTONS ARE NOT PRESSED FOR 5 SEC
void timer_callback(void) {
	if (BUTTON_UP == 0 && BUTTON_DOWN == 0) {
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 13 04 	call	0x826	; 0x826 <DIO_u8ReadPinVal>
  9a:	81 11       	cpse	r24, r1
  9c:	1e c0       	rjmp	.+60     	; 0xda <timer_callback+0x48>
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	0e 94 13 04 	call	0x826	; 0x826 <DIO_u8ReadPinVal>
  a6:	81 11       	cpse	r24, r1
  a8:	18 c0       	rjmp	.+48     	; 0xda <timer_callback+0x48>
		// No buttons pressed
		if (timer > 0) {
  aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ae:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b2:	89 2b       	or	r24, r25
  b4:	49 f0       	breq	.+18     	; 0xc8 <timer_callback+0x36>
			timer--;  // Decrement timer
  b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ba:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		if (timer == 0) {
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d0:	89 2b       	or	r24, r25
  d2:	61 f4       	brne	.+24     	; 0xec <timer_callback+0x5a>
			// If no buttons are pressed for 5ms, reset SET_ON
			SET_ON = 0;
  d4:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
  d8:	08 95       	ret
		}
		} else {
		// Reset the timer when a button is pressed
		timer = 5000;
  da:	88 e8       	ldi	r24, 0x88	; 136
  dc:	93 e1       	ldi	r25, 0x13	; 19
  de:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		SET_ON = 1;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
  ec:	08 95       	ret

000000ee <Heater>:
#define F_CPU 16000000UL
#include <util/delay.h>


void Heater(u8 temp, u8 heater_temp){
	if(temp<heater_temp){
  ee:	86 17       	cp	r24, r22
  f0:	48 f4       	brcc	.+18     	; 0x104 <Heater+0x16>
		LED_voidOn(DIO_PORTC,DIO_PIN5);//HEATER LAMP ON
  f2:	65 e0       	ldi	r22, 0x05	; 5
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LED_voidOn>
		LED_voidToggle(DIO_PORTA,DIO_PIN2);//ON-OFF LED TOGGLE EVERY 1SEC
  fa:	62 e0       	ldi	r22, 0x02	; 2
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 18 02 	call	0x430	; 0x430 <LED_voidToggle>
 102:	08 95       	ret
		
	}
	else{
		LED_voidOff(DIO_PORTC,DIO_PIN5);//HEATER LAMP OFF
 104:	65 e0       	ldi	r22, 0x05	; 5
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	0e 94 09 02 	call	0x412	; 0x412 <LED_voidOff>
 10c:	08 95       	ret

0000010e <cooler>:
		
	}
}

void cooler(u8 temp ,u8 cooler_temp){
	if (temp>cooler_temp){
 10e:	68 17       	cp	r22, r24
 110:	48 f4       	brcc	.+18     	; 0x124 <cooler+0x16>
		LED_voidOn(DIO_PORTC,DIO_PIN4);//COOLER LAMP ON
 112:	64 e0       	ldi	r22, 0x04	; 4
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LED_voidOn>
		LED_voidOn(DIO_PORTA,DIO_PIN2);//ON-OFF LED ON
 11a:	62 e0       	ldi	r22, 0x02	; 2
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LED_voidOn>
 122:	08 95       	ret
		
	}
	else {
		LED_voidOff(DIO_PORTC,DIO_PIN4);//COOLER LAMP OFF
 124:	64 e0       	ldi	r22, 0x04	; 4
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	0e 94 09 02 	call	0x412	; 0x412 <LED_voidOff>
 12c:	08 95       	ret

0000012e <CalculateAverage>:
	}
	
	
}

u8 CalculateAverage(u8 *readings, u8 count) {
 12e:	dc 01       	movw	r26, r24
	u16 sum = 0;
	for (u8 i = 0; i < count; i++) {
 130:	90 e0       	ldi	r25, 0x00	; 0
	
	
}

u8 CalculateAverage(u8 *readings, u8 count) {
	u16 sum = 0;
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
	for (u8 i = 0; i < count; i++) {
 136:	07 c0       	rjmp	.+14     	; 0x146 <CalculateAverage+0x18>
		sum += readings[i];
 138:	fd 01       	movw	r30, r26
 13a:	e9 0f       	add	r30, r25
 13c:	f1 1d       	adc	r31, r1
 13e:	40 81       	ld	r20, Z
 140:	24 0f       	add	r18, r20
 142:	31 1d       	adc	r19, r1
	
}

u8 CalculateAverage(u8 *readings, u8 count) {
	u16 sum = 0;
	for (u8 i = 0; i < count; i++) {
 144:	9f 5f       	subi	r25, 0xFF	; 255
 146:	96 17       	cp	r25, r22
 148:	b8 f3       	brcs	.-18     	; 0x138 <CalculateAverage+0xa>
		sum += readings[i];
	}
	return sum / count;
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	c9 01       	movw	r24, r18
 14e:	0e 94 81 06 	call	0xd02	; 0xd02 <__udivmodhi4>
 152:	86 2f       	mov	r24, r22
}
 154:	08 95       	ret

00000156 <main>:
		timer = 5000;
		SET_ON = 1;
	}
}

int main(){
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	2b 97       	sbiw	r28, 0x0b	; 11
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	f8 94       	cli
 164:	de bf       	out	0x3e, r29	; 62
 166:	0f be       	out	0x3f, r0	; 63
 168:	cd bf       	out	0x3d, r28	; 61

	ADC_voidInit();
 16a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <ADC_voidInit>
	EEPROM_voidInit();
 16e:	0e 94 b1 01 	call	0x362	; 0x362 <EEPROM_voidInit>
	GI_voidEnable();
 172:	0e 94 61 04 	call	0x8c2	; 0x8c2 <GI_voidEnable>
	TIM0_voidOverFlowInit(OV_MODE);
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 65 04 	call	0x8ca	; 0x8ca <TIM0_voidOverFlowInit>
	TIM0_voidSetCallBack(timer_callback,OV_MODE);
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	89 e4       	ldi	r24, 0x49	; 73
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 85 04 	call	0x90a	; 0x90a <TIM0_voidSetCallBack>
u16 val=0;
f32 temp=0;

u8 set_temp_min=35;
u8 set_temp_max=75;
u8 set_temp=60;
 186:	8c e3       	ldi	r24, 0x3C	; 60
 188:	89 83       	std	Y+1, r24	; 0x01

u8 cooler_temp=0;
u8 heater_temp=0;
u8 heater_system=0;

u8 temp_readings[10] = {0};
 18a:	fe 01       	movw	r30, r28
 18c:	32 96       	adiw	r30, 0x02	; 2
 18e:	8a e0       	ldi	r24, 0x0A	; 10
 190:	df 01       	movw	r26, r30
 192:	1d 92       	st	X+, r1
 194:	8a 95       	dec	r24
 196:	e9 f7       	brne	.-6      	; 0x192 <main+0x3c>
u8 index = 0;
u8 count = 0;
 198:	f1 2c       	mov	r15, r1
u8 cooler_temp=0;
u8 heater_temp=0;
u8 heater_system=0;

u8 temp_readings[10] = {0};
u8 index = 0;
 19a:	b1 2c       	mov	r11, r1
u8 set_temp=60;
u8 last_set_temp = 60;

u8 cooler_temp=0;
u8 heater_temp=0;
u8 heater_system=0;
 19c:	d1 2c       	mov	r13, r1
f32 temp=0;

u8 set_temp_min=35;
u8 set_temp_max=75;
u8 set_temp=60;
u8 last_set_temp = 60;
 19e:	0f 2e       	mov	r0, r31
 1a0:	fc e3       	ldi	r31, 0x3C	; 60
 1a2:	cf 2e       	mov	r12, r31
 1a4:	f0 2d       	mov	r31, r0
u8 count = 0;
u8 temp_avg=0;

while(1)
{    
if (BUTTON_ON_OFF==1)
 1a6:	67 e0       	ldi	r22, 0x07	; 7
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	0e 94 13 04 	call	0x826	; 0x826 <DIO_u8ReadPinVal>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <main+0x5e>
 1b2:	d2 c0       	rjmp	.+420    	; 0x358 <main+0x202>
	{while(BUTTON_ON_OFF==1);//debounce
 1b4:	67 e0       	ldi	r22, 0x07	; 7
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 13 04 	call	0x826	; 0x826 <DIO_u8ReadPinVal>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	d1 f3       	breq	.-12     	; 0x1b4 <main+0x5e>
		heater_system=1;
 1c0:	dd 24       	eor	r13, r13
 1c2:	d3 94       	inc	r13
 1c4:	c9 c0       	rjmp	.+402    	; 0x358 <main+0x202>
		}
   //HEATER SYSTEM ON
	while( heater_system==1){
		val = ADC_u16ReadChannel(ADC1_);
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <ADC_u16ReadChannel>
		temp =(f32) val*500/1024;
 1cc:	bc 01       	movw	r22, r24
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	4a ef       	ldi	r20, 0xFA	; 250
 1dc:	53 e4       	ldi	r21, 0x43	; 67
 1de:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__mulsf3>
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	40 e8       	ldi	r20, 0x80	; 128
 1e8:	5a e3       	ldi	r21, 0x3A	; 58
 1ea:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__mulsf3>

		// Update temperature buffer for averaging
		temp_readings[index++] = temp;
 1ee:	aa 24       	eor	r10, r10
 1f0:	a3 94       	inc	r10
 1f2:	ab 0c       	add	r10, r11
 1f4:	0b 2d       	mov	r16, r11
 1f6:	10 e0       	ldi	r17, 0x00	; 0
 1f8:	0e 94 57 05 	call	0xaae	; 0xaae <__fixunssfsi>
 1fc:	e6 2e       	mov	r14, r22
 1fe:	e2 e0       	ldi	r30, 0x02	; 2
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	ec 0f       	add	r30, r28
 204:	fd 1f       	adc	r31, r29
 206:	e0 0f       	add	r30, r16
 208:	f1 1f       	adc	r31, r17
 20a:	60 83       	st	Z, r22
		if (index == 10) index = 0;
 20c:	ba e0       	ldi	r27, 0x0A	; 10
 20e:	ab 16       	cp	r10, r27
 210:	11 f0       	breq	.+4      	; 0x216 <main+0xc0>
	while( heater_system==1){
		val = ADC_u16ReadChannel(ADC1_);
		temp =(f32) val*500/1024;

		// Update temperature buffer for averaging
		temp_readings[index++] = temp;
 212:	ba 2c       	mov	r11, r10
 214:	01 c0       	rjmp	.+2      	; 0x218 <main+0xc2>
		if (index == 10) index = 0;
 216:	b1 2c       	mov	r11, r1
		if (count < 10) count++;
 218:	89 e0       	ldi	r24, 0x09	; 9
 21a:	8f 15       	cp	r24, r15
 21c:	08 f0       	brcs	.+2      	; 0x220 <main+0xca>
 21e:	f3 94       	inc	r15

		// Calculate average temperature
		temp_avg = CalculateAverage(temp_readings, count);
 220:	6f 2d       	mov	r22, r15
 222:	ce 01       	movw	r24, r28
 224:	02 96       	adiw	r24, 0x02	; 2
 226:	0e 94 97 00 	call	0x12e	; 0x12e <CalculateAverage>
					
	
	cooler_temp=set_temp+5;
 22a:	99 81       	ldd	r25, Y+1	; 0x01
 22c:	0f 2e       	mov	r0, r31
 22e:	f5 e0       	ldi	r31, 0x05	; 5
 230:	9f 2e       	mov	r9, r31
 232:	f0 2d       	mov	r31, r0
 234:	99 0e       	add	r9, r25
	heater_temp=set_temp-5;
 236:	0f 2e       	mov	r0, r31
 238:	fb ef       	ldi	r31, 0xFB	; 251
 23a:	af 2e       	mov	r10, r31
 23c:	f0 2d       	mov	r31, r0
 23e:	a9 0e       	add	r10, r25
	
	temp_tens = (u8)temp_avg / 10;
 240:	1d ec       	ldi	r17, 0xCD	; 205
 242:	81 9f       	mul	r24, r17
 244:	01 2d       	mov	r16, r1
 246:	11 24       	eor	r1, r1
 248:	06 95       	lsr	r16
 24a:	06 95       	lsr	r16
 24c:	06 95       	lsr	r16
	temp_units = (u8)temp_avg % 10;
 24e:	30 2f       	mov	r19, r16
 250:	33 0f       	add	r19, r19
 252:	23 2f       	mov	r18, r19
 254:	22 0f       	add	r18, r18
 256:	22 0f       	add	r18, r18
 258:	23 0f       	add	r18, r19
 25a:	88 2e       	mov	r8, r24
 25c:	82 1a       	sub	r8, r18
	

	//setting mode
	set_temp_tens =  (u8)set_temp / 10;
 25e:	91 9f       	mul	r25, r17
 260:	11 2d       	mov	r17, r1
 262:	11 24       	eor	r1, r1
 264:	16 95       	lsr	r17
 266:	16 95       	lsr	r17
 268:	16 95       	lsr	r17
	set_temp_units = (u8)set_temp % 10;
 26a:	21 2f       	mov	r18, r17
 26c:	22 0f       	add	r18, r18
 26e:	82 2f       	mov	r24, r18
 270:	88 0f       	add	r24, r24
 272:	88 0f       	add	r24, r24
 274:	82 0f       	add	r24, r18
 276:	79 2e       	mov	r7, r25
 278:	78 1a       	sub	r7, r24
	
	
		if(SET_ON==0){
 27a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 27e:	81 11       	cpse	r24, r1
 280:	04 c0       	rjmp	.+8      	; 0x28a <main+0x134>
			SSD_voidDisplayBOTH(temp_tens,temp_units);
 282:	68 2d       	mov	r22, r8
 284:	80 2f       	mov	r24, r16
 286:	0e 94 88 02 	call	0x510	; 0x510 <SSD_voidDisplayBOTH>
		}
		if(BUTTON_UP==1||BUTTON_DOWN==1)
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 13 04 	call	0x826	; 0x826 <DIO_u8ReadPinVal>
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	31 f0       	breq	.+12     	; 0x2a2 <main+0x14c>
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 13 04 	call	0x826	; 0x826 <DIO_u8ReadPinVal>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	19 f4       	brne	.+6      	; 0x2a8 <main+0x152>
		{SET_ON=1;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
		}
		
	//SETTING MODE ON
		if(SET_ON==1){
 2a8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <main+0x15c>
 2b0:	42 c0       	rjmp	.+132    	; 0x336 <main+0x1e0>
	    EEPROM_voidReadByte(500,&set_temp);//set setting temp as saved 
 2b2:	be 01       	movw	r22, r28
 2b4:	6f 5f       	subi	r22, 0xFF	; 255
 2b6:	7f 4f       	sbci	r23, 0xFF	; 255
 2b8:	84 ef       	ldi	r24, 0xF4	; 244
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <EEPROM_voidReadByte>
		SSD_Toggle(temp_tens,temp_units,set_temp_tens,set_temp_units);
 2c0:	27 2d       	mov	r18, r7
 2c2:	41 2f       	mov	r20, r17
 2c4:	68 2d       	mov	r22, r8
 2c6:	80 2f       	mov	r24, r16
 2c8:	0e 94 ae 02 	call	0x55c	; 0x55c <SSD_Toggle>
	
		//BUTTON UP
			if(BUTTON_UP==1 && set_temp<set_temp_max){
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 13 04 	call	0x826	; 0x826 <DIO_u8ReadPinVal>
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	69 f4       	brne	.+26     	; 0x2f2 <main+0x19c>
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	8b 34       	cpi	r24, 0x4B	; 75
 2dc:	50 f4       	brcc	.+20     	; 0x2f2 <main+0x19c>
				while(BUTTON_UP==1);
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 13 04 	call	0x826	; 0x826 <DIO_u8ReadPinVal>
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	d1 f3       	breq	.-12     	; 0x2de <main+0x188>
				set_temp=set_temp+5;	
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	8b 5f       	subi	r24, 0xFB	; 251
 2ee:	89 83       	std	Y+1, r24	; 0x01
 2f0:	12 c0       	rjmp	.+36     	; 0x316 <main+0x1c0>
			}
		//BUTTON DOWN
			else if(BUTTON_DOWN==1 && set_temp>set_temp_min){
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 13 04 	call	0x826	; 0x826 <DIO_u8ReadPinVal>
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	61 f4       	brne	.+24     	; 0x316 <main+0x1c0>
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	84 32       	cpi	r24, 0x24	; 36
 302:	48 f0       	brcs	.+18     	; 0x316 <main+0x1c0>
				while(BUTTON_DOWN==1);
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 13 04 	call	0x826	; 0x826 <DIO_u8ReadPinVal>
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	d1 f3       	breq	.-12     	; 0x304 <main+0x1ae>
				set_temp=set_temp-5;	
 310:	89 81       	ldd	r24, Y+1	; 0x01
 312:	85 50       	subi	r24, 0x05	; 5
 314:	89 83       	std	Y+1, r24	; 0x01
			}
		//EEPROM SAVE SET VALUE
			if (set_temp != last_set_temp) {
 316:	69 81       	ldd	r22, Y+1	; 0x01
 318:	c6 16       	cp	r12, r22
 31a:	29 f0       	breq	.+10     	; 0x326 <main+0x1d0>
				EEPROM_voidWriteByte(500, set_temp);
 31c:	84 ef       	ldi	r24, 0xF4	; 244
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	0e 94 b4 01 	call	0x368	; 0x368 <EEPROM_voidWriteByte>
				last_set_temp = set_temp;
 324:	c9 80       	ldd	r12, Y+1	; 0x01
			}
			
			cooler(temp,cooler_temp);
 326:	69 2d       	mov	r22, r9
 328:	8e 2d       	mov	r24, r14
 32a:	0e 94 87 00 	call	0x10e	; 0x10e <cooler>
			Heater(temp,heater_temp);
 32e:	6a 2d       	mov	r22, r10
 330:	8e 2d       	mov	r24, r14
 332:	0e 94 77 00 	call	0xee	; 0xee <Heater>
			
			}
	//HEATER SYSTEM OFF
	if(BUTTON_ON_OFF==1){
 336:	67 e0       	ldi	r22, 0x07	; 7
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 13 04 	call	0x826	; 0x826 <DIO_u8ReadPinVal>
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	59 f4       	brne	.+22     	; 0x358 <main+0x202>
	while(BUTTON_ON_OFF==1);
 342:	67 e0       	ldi	r22, 0x07	; 7
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 13 04 	call	0x826	; 0x826 <DIO_u8ReadPinVal>
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	d1 f3       	breq	.-12     	; 0x342 <main+0x1ec>
		heater_system=0;
	LED_voidOff(DIO_PORTA,DIO_PIN2);}
 34e:	62 e0       	ldi	r22, 0x02	; 2
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 09 02 	call	0x412	; 0x412 <LED_voidOff>
			
			}
	//HEATER SYSTEM OFF
	if(BUTTON_ON_OFF==1){
	while(BUTTON_ON_OFF==1);
		heater_system=0;
 356:	d1 2c       	mov	r13, r1
if (BUTTON_ON_OFF==1)
	{while(BUTTON_ON_OFF==1);//debounce
		heater_system=1;
		}
   //HEATER SYSTEM ON
	while( heater_system==1){
 358:	a1 e0       	ldi	r26, 0x01	; 1
 35a:	da 16       	cp	r13, r26
 35c:	09 f4       	brne	.+2      	; 0x360 <main+0x20a>
 35e:	33 cf       	rjmp	.-410    	; 0x1c6 <main+0x70>
 360:	22 cf       	rjmp	.-444    	; 0x1a6 <main+0x50>

00000362 <EEPROM_voidInit>:
#include "EEPROM_private.h"


void EEPROM_voidInit(void)
{
	TWI_voidInitMaster();	
 362:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <TWI_voidInitMaster>
 366:	08 95       	ret

00000368 <EEPROM_voidWriteByte>:
}


void EEPROM_voidWriteByte(u16 copy_u16WordAdd, u8 copy_u8Data)
{
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	d8 2f       	mov	r29, r24
 370:	c6 2f       	mov	r28, r22
	u8 local_u8DeviceAdd = (copy_u16WordAdd >> 8) | EEPROM_FIXED_ADDRESS;
 372:	19 2f       	mov	r17, r25
 374:	10 65       	ori	r17, 0x50	; 80
	
	// Send start condition
	TWI_voidSendStartCondition();
 376:	0e 94 ee 04 	call	0x9dc	; 0x9dc <TWI_voidSendStartCondition>
	
	// Send slave address with write operation (device address)
	TWI_voidSendSlaveAddWithWrite(local_u8DeviceAdd);
 37a:	81 2f       	mov	r24, r17
 37c:	0e 94 11 05 	call	0xa22	; 0xa22 <TWI_voidSendSlaveAddWithWrite>
	
	// Send word address
	TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdd);
 380:	8d 2f       	mov	r24, r29
 382:	0e 94 3b 05 	call	0xa76	; 0xa76 <TWI_voidTransmitMasterDataByte>
	
	// Send byte data
	TWI_voidTransmitMasterDataByte(copy_u8Data);
 386:	8c 2f       	mov	r24, r28
 388:	0e 94 3b 05 	call	0xa76	; 0xa76 <TWI_voidTransmitMasterDataByte>
	
	// Send stop condition
	TWI_voidSendStopCondition();
 38c:	0e 94 0a 05 	call	0xa14	; 0xa14 <TWI_voidSendStopCondition>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 390:	8f e1       	ldi	r24, 0x1F	; 31
 392:	9e e4       	ldi	r25, 0x4E	; 78
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <EEPROM_voidWriteByte+0x2c>
 398:	00 c0       	rjmp	.+0      	; 0x39a <EEPROM_voidWriteByte+0x32>
 39a:	00 00       	nop
	
	// Self-timed Write Cycle delay
	_delay_ms(5);
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	08 95       	ret

000003a4 <EEPROM_voidReadByte>:


void EEPROM_voidReadByte(u16 copy_u16WordAdd, u8* copy_pu8Data)
{
 3a4:	0f 93       	push	r16
 3a6:	1f 93       	push	r17
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
	if(copy_pu8Data != null)
 3ac:	61 15       	cp	r22, r1
 3ae:	71 05       	cpc	r23, r1
 3b0:	e1 f0       	breq	.+56     	; 0x3ea <EEPROM_voidReadByte+0x46>
 3b2:	8b 01       	movw	r16, r22
 3b4:	d8 2f       	mov	r29, r24
	{
		u8 local_u8DeviceAdd = (copy_u16WordAdd >> 8) | EEPROM_FIXED_ADDRESS;
 3b6:	c9 2f       	mov	r28, r25
 3b8:	c0 65       	ori	r28, 0x50	; 80
		
		// Send start condition
		TWI_voidSendStartCondition();
 3ba:	0e 94 ee 04 	call	0x9dc	; 0x9dc <TWI_voidSendStartCondition>
		
		// Send slave address with write operation (device address)
		TWI_voidSendSlaveAddWithWrite(local_u8DeviceAdd);
 3be:	8c 2f       	mov	r24, r28
 3c0:	0e 94 11 05 	call	0xa22	; 0xa22 <TWI_voidSendSlaveAddWithWrite>
		
		// Send word address
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdd);
 3c4:	8d 2f       	mov	r24, r29
 3c6:	0e 94 3b 05 	call	0xa76	; 0xa76 <TWI_voidTransmitMasterDataByte>
		
		// Send repeated start condition in order to switch i2c operation (W >> R)
		TWI_voidSendRepStartCondition();
 3ca:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <TWI_voidSendRepStartCondition>
		
		// Send slave address with read operation (device address)
		TWI_voidSendSlaveAddWithRead(local_u8DeviceAdd);
 3ce:	8c 2f       	mov	r24, r28
 3d0:	0e 94 26 05 	call	0xa4c	; 0xa4c <TWI_voidSendSlaveAddWithRead>
		
		// Read byte data and respond without ACK
		TWI_voidReceiveMasterDataByteWithoutACK(copy_pu8Data);
 3d4:	c8 01       	movw	r24, r16
 3d6:	0e 94 47 05 	call	0xa8e	; 0xa8e <TWI_voidReceiveMasterDataByteWithoutACK>
		
		// Send stop condition
		TWI_voidSendStopCondition();
 3da:	0e 94 0a 05 	call	0xa14	; 0xa14 <TWI_voidSendStopCondition>
 3de:	8f e1       	ldi	r24, 0x1F	; 31
 3e0:	9e e4       	ldi	r25, 0x4E	; 78
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <EEPROM_voidReadByte+0x3e>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <EEPROM_voidReadByte+0x44>
 3e8:	00 00       	nop
	}
	else
	{
		//return Error State
	}
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	1f 91       	pop	r17
 3f0:	0f 91       	pop	r16
 3f2:	08 95       	ret

000003f4 <LED_voidOn>:
#include "LED_interface.h"

#define F_CPU 16000000UL
#include <util/delay.h>

void LED_voidOn(u8 copy_u8port, u8 copy_u8pin){
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	c8 2f       	mov	r28, r24
 3fa:	d6 2f       	mov	r29, r22
	
	DIO_voidSetPinDir(copy_u8port, copy_u8pin, OUTPUT );
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_voidSetPinDir>
	DIO_voidSetPinVal(copy_u8port, copy_u8pin, HIGH);
 402:	41 e0       	ldi	r20, 0x01	; 1
 404:	6d 2f       	mov	r22, r29
 406:	8c 2f       	mov	r24, r28
 408:	0e 94 6f 03 	call	0x6de	; 0x6de <DIO_voidSetPinVal>
	
}
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <LED_voidOff>:


void LED_voidOff(u8 copy_u8port, u8 copy_u8pin){
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	c8 2f       	mov	r28, r24
 418:	d6 2f       	mov	r29, r22
		
		DIO_voidSetPinDir(copy_u8port, copy_u8pin, OUTPUT );
 41a:	41 e0       	ldi	r20, 0x01	; 1
 41c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_voidSetPinDir>
		DIO_voidSetPinVal(copy_u8port, copy_u8pin, LOW);
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	6d 2f       	mov	r22, r29
 424:	8c 2f       	mov	r24, r28
 426:	0e 94 6f 03 	call	0x6de	; 0x6de <DIO_voidSetPinVal>
	
}
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <LED_voidToggle>:

void LED_voidToggle(u8 copy_u8port, u8 copy_u8pin){
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	c8 2f       	mov	r28, r24
 436:	d6 2f       	mov	r29, r22
		DIO_voidSetPinDir(copy_u8port, copy_u8pin, OUTPUT );
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_voidSetPinDir>
		DIO_voidToggelPinVal(copy_u8port, copy_u8pin);
 43e:	6d 2f       	mov	r22, r29
 440:	8c 2f       	mov	r24, r28
 442:	0e 94 df 03 	call	0x7be	; 0x7be <DIO_voidToggelPinVal>
 446:	2f ef       	ldi	r18, 0xFF	; 255
 448:	81 ee       	ldi	r24, 0xE1	; 225
 44a:	94 e0       	ldi	r25, 0x04	; 4
 44c:	21 50       	subi	r18, 0x01	; 1
 44e:	80 40       	sbci	r24, 0x00	; 0
 450:	90 40       	sbci	r25, 0x00	; 0
 452:	e1 f7       	brne	.-8      	; 0x44c <LED_voidToggle+0x1c>
 454:	00 c0       	rjmp	.+0      	; 0x456 <LED_voidToggle+0x26>
 456:	00 00       	nop
		_delay_ms(100);
		DIO_voidToggelPinVal(copy_u8port, copy_u8pin);
 458:	6d 2f       	mov	r22, r29
 45a:	8c 2f       	mov	r24, r28
 45c:	0e 94 df 03 	call	0x7be	; 0x7be <DIO_voidToggelPinVal>
		
			
}
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <SSD_voidDisplayNum>:
	0x6F  // 9
};


void SSD_voidDisplayNum(u8 copy_u8num, u8 ssd_num , u8 ssd_state)
{
 466:	1f 93       	push	r17
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	18 2f       	mov	r17, r24
 46e:	c6 2f       	mov	r28, r22
 470:	d4 2f       	mov	r29, r20
	DIO_voidSetPortDir(SSD_PORT, 0xFF);
 472:	6f ef       	ldi	r22, 0xFF	; 255
 474:	83 e0       	ldi	r24, 0x03	; 3
 476:	0e 94 41 04 	call	0x882	; 0x882 <DIO_voidSetPortDir>
	
	if(ssd_num ==SSD1){
 47a:	c1 11       	cpse	r28, r1
 47c:	22 c0       	rjmp	.+68     	; 0x4c2 <SSD_voidDisplayNum+0x5c>
		
		if(ssd_state== ON){
 47e:	db 30       	cpi	r29, 0x0B	; 11
 480:	99 f4       	brne	.+38     	; 0x4a8 <SSD_voidDisplayNum+0x42>
	DIO_voidSetPinDir(SSD_EN1_PORT, SSD_EN1_PIN, OUTPUT);
 482:	41 e0       	ldi	r20, 0x01	; 1
 484:	66 e0       	ldi	r22, 0x06	; 6
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_voidSetPinDir>
	DIO_voidSetPinVal(SSD_EN1_PORT, SSD_EN1_PIN, LOW);//LOW for common-cathode as ground
 48c:	40 e0       	ldi	r20, 0x00	; 0
 48e:	66 e0       	ldi	r22, 0x06	; 6
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	0e 94 6f 03 	call	0x6de	; 0x6de <DIO_voidSetPinVal>
    DIO_voidSetPortVal(SSD_PORT,SSD_NUM_PATTERNS[copy_u8num] );
 496:	e1 2f       	mov	r30, r17
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	ee 59       	subi	r30, 0x9E	; 158
 49c:	ff 4f       	sbci	r31, 0xFF	; 255
 49e:	60 81       	ld	r22, Z
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	0e 94 51 04 	call	0x8a2	; 0x8a2 <DIO_voidSetPortVal>
 4a6:	30 c0       	rjmp	.+96     	; 0x508 <SSD_voidDisplayNum+0xa2>
		}
		else if (ssd_state== OFF){
 4a8:	d6 31       	cpi	r29, 0x16	; 22
 4aa:	71 f5       	brne	.+92     	; 0x508 <SSD_voidDisplayNum+0xa2>
			DIO_voidSetPinDir(SSD_EN1_PORT, SSD_EN1_PIN, OUTPUT);
 4ac:	41 e0       	ldi	r20, 0x01	; 1
 4ae:	66 e0       	ldi	r22, 0x06	; 6
 4b0:	82 e0       	ldi	r24, 0x02	; 2
 4b2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_voidSetPinDir>
			DIO_voidSetPinVal(SSD_EN1_PORT, SSD_EN1_PIN, HIGH);	
 4b6:	41 e0       	ldi	r20, 0x01	; 1
 4b8:	66 e0       	ldi	r22, 0x06	; 6
 4ba:	82 e0       	ldi	r24, 0x02	; 2
 4bc:	0e 94 6f 03 	call	0x6de	; 0x6de <DIO_voidSetPinVal>
 4c0:	23 c0       	rjmp	.+70     	; 0x508 <SSD_voidDisplayNum+0xa2>
		}
		
	}
	else if(ssd_num== SSD2){
 4c2:	c1 30       	cpi	r28, 0x01	; 1
 4c4:	09 f5       	brne	.+66     	; 0x508 <SSD_voidDisplayNum+0xa2>
		if(ssd_state== ON){
 4c6:	db 30       	cpi	r29, 0x0B	; 11
 4c8:	99 f4       	brne	.+38     	; 0x4f0 <SSD_voidDisplayNum+0x8a>
		DIO_voidSetPinDir(SSD_EN2_PORT, SSD_EN2_PIN, OUTPUT);
 4ca:	41 e0       	ldi	r20, 0x01	; 1
 4cc:	67 e0       	ldi	r22, 0x07	; 7
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_voidSetPinDir>
		DIO_voidSetPinVal(SSD_EN2_PORT, SSD_EN2_PIN, LOW);
 4d4:	40 e0       	ldi	r20, 0x00	; 0
 4d6:	67 e0       	ldi	r22, 0x07	; 7
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	0e 94 6f 03 	call	0x6de	; 0x6de <DIO_voidSetPinVal>
		DIO_voidSetPortVal(SSD_PORT,SSD_NUM_PATTERNS[copy_u8num]);
 4de:	e1 2f       	mov	r30, r17
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	ee 59       	subi	r30, 0x9E	; 158
 4e4:	ff 4f       	sbci	r31, 0xFF	; 255
 4e6:	60 81       	ld	r22, Z
 4e8:	83 e0       	ldi	r24, 0x03	; 3
 4ea:	0e 94 51 04 	call	0x8a2	; 0x8a2 <DIO_voidSetPortVal>
 4ee:	0c c0       	rjmp	.+24     	; 0x508 <SSD_voidDisplayNum+0xa2>
		}
		
		else if (ssd_state== OFF){
 4f0:	d6 31       	cpi	r29, 0x16	; 22
 4f2:	51 f4       	brne	.+20     	; 0x508 <SSD_voidDisplayNum+0xa2>
		DIO_voidSetPinDir(SSD_EN2_PORT, SSD_EN2_PIN, OUTPUT);
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	67 e0       	ldi	r22, 0x07	; 7
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_voidSetPinDir>
		DIO_voidSetPinVal(SSD_EN2_PORT, SSD_EN2_PIN, HIGH);
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	67 e0       	ldi	r22, 0x07	; 7
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	0e 94 6f 03 	call	0x6de	; 0x6de <DIO_voidSetPinVal>
		}
	}

	
}
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	1f 91       	pop	r17
 50e:	08 95       	ret

00000510 <SSD_voidDisplayBOTH>:
void SSD_voidDisplayBOTH(u8 num1, u8 num2){
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
 514:	d8 2f       	mov	r29, r24
 516:	c6 2f       	mov	r28, r22
	SSD_voidDisplayNum(num1,SSD1,ON);
 518:	4b e0       	ldi	r20, 0x0B	; 11
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	0e 94 33 02 	call	0x466	; 0x466 <SSD_voidDisplayNum>
 520:	8f e1       	ldi	r24, 0x1F	; 31
 522:	9e e4       	ldi	r25, 0x4E	; 78
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	f1 f7       	brne	.-4      	; 0x524 <SSD_voidDisplayBOTH+0x14>
 528:	00 c0       	rjmp	.+0      	; 0x52a <SSD_voidDisplayBOTH+0x1a>
 52a:	00 00       	nop
	_delay_ms(5);
	SSD_voidDisplayNum(num1,SSD1,OFF);
 52c:	46 e1       	ldi	r20, 0x16	; 22
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	8d 2f       	mov	r24, r29
 532:	0e 94 33 02 	call	0x466	; 0x466 <SSD_voidDisplayNum>
	
	SSD_voidDisplayNum(num2,SSD2,ON);
 536:	4b e0       	ldi	r20, 0x0B	; 11
 538:	61 e0       	ldi	r22, 0x01	; 1
 53a:	8c 2f       	mov	r24, r28
 53c:	0e 94 33 02 	call	0x466	; 0x466 <SSD_voidDisplayNum>
 540:	8f e1       	ldi	r24, 0x1F	; 31
 542:	9e e4       	ldi	r25, 0x4E	; 78
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <SSD_voidDisplayBOTH+0x34>
 548:	00 c0       	rjmp	.+0      	; 0x54a <SSD_voidDisplayBOTH+0x3a>
 54a:	00 00       	nop
	_delay_ms(5);
	SSD_voidDisplayNum(num2,SSD2,OFF);
 54c:	46 e1       	ldi	r20, 0x16	; 22
 54e:	61 e0       	ldi	r22, 0x01	; 1
 550:	8c 2f       	mov	r24, r28
 552:	0e 94 33 02 	call	0x466	; 0x466 <SSD_voidDisplayNum>
	
}
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	08 95       	ret

0000055c <SSD_Toggle>:


void SSD_Toggle(u8 temp_tens,u8 temp_units,u8 set_temp_tens,u8 set_temp_units){
 55c:	ff 92       	push	r15
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	f8 2e       	mov	r15, r24
 568:	06 2f       	mov	r16, r22
 56a:	d4 2f       	mov	r29, r20
 56c:	12 2f       	mov	r17, r18
	for (u8 i = 0; i < 50; i++) 
 56e:	c0 e0       	ldi	r28, 0x00	; 0
 570:	05 c0       	rjmp	.+10     	; 0x57c <SSD_Toggle+0x20>
	{ // Adjust the loop count for longer display time
		SSD_voidDisplayBOTH(temp_tens, temp_units);
 572:	60 2f       	mov	r22, r16
 574:	8f 2d       	mov	r24, r15
 576:	0e 94 88 02 	call	0x510	; 0x510 <SSD_voidDisplayBOTH>
	
}


void SSD_Toggle(u8 temp_tens,u8 temp_units,u8 set_temp_tens,u8 set_temp_units){
	for (u8 i = 0; i < 50; i++) 
 57a:	cf 5f       	subi	r28, 0xFF	; 255
 57c:	c2 33       	cpi	r28, 0x32	; 50
 57e:	c8 f3       	brcs	.-14     	; 0x572 <SSD_Toggle+0x16>
 580:	2f ef       	ldi	r18, 0xFF	; 255
 582:	80 e7       	ldi	r24, 0x70	; 112
 584:	92 e0       	ldi	r25, 0x02	; 2
 586:	21 50       	subi	r18, 0x01	; 1
 588:	80 40       	sbci	r24, 0x00	; 0
 58a:	90 40       	sbci	r25, 0x00	; 0
 58c:	e1 f7       	brne	.-8      	; 0x586 <SSD_Toggle+0x2a>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <SSD_Toggle+0x34>
 590:	00 00       	nop
	{ // Adjust the loop count for longer display time
		SSD_voidDisplayBOTH(temp_tens, temp_units);
	}
_delay_ms(50);
	// Display set temperature
	for (u8 i = 0; i < 50; i++) { // Adjust the loop count for longer display time
 592:	c0 e0       	ldi	r28, 0x00	; 0
 594:	05 c0       	rjmp	.+10     	; 0x5a0 <SSD_Toggle+0x44>
		SSD_voidDisplayBOTH(set_temp_tens, set_temp_units);
 596:	61 2f       	mov	r22, r17
 598:	8d 2f       	mov	r24, r29
 59a:	0e 94 88 02 	call	0x510	; 0x510 <SSD_voidDisplayBOTH>
	{ // Adjust the loop count for longer display time
		SSD_voidDisplayBOTH(temp_tens, temp_units);
	}
_delay_ms(50);
	// Display set temperature
	for (u8 i = 0; i < 50; i++) { // Adjust the loop count for longer display time
 59e:	cf 5f       	subi	r28, 0xFF	; 255
 5a0:	c2 33       	cpi	r28, 0x32	; 50
 5a2:	c8 f3       	brcs	.-14     	; 0x596 <SSD_Toggle+0x3a>
 5a4:	2f ef       	ldi	r18, 0xFF	; 255
 5a6:	80 e7       	ldi	r24, 0x70	; 112
 5a8:	92 e0       	ldi	r25, 0x02	; 2
 5aa:	21 50       	subi	r18, 0x01	; 1
 5ac:	80 40       	sbci	r24, 0x00	; 0
 5ae:	90 40       	sbci	r25, 0x00	; 0
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <SSD_Toggle+0x4e>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <SSD_Toggle+0x58>
 5b4:	00 00       	nop
		SSD_voidDisplayBOTH(set_temp_tens, set_temp_units);
	}
	
_delay_ms(50);

}
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	1f 91       	pop	r17
 5bc:	0f 91       	pop	r16
 5be:	ff 90       	pop	r15
 5c0:	08 95       	ret

000005c2 <ADC_voidInit>:

void ADC_voidInit(void){
	
	/*Voltage Reference Selection : AVCC with external capacitor at AREF pin */
	
            	SET_BIT(ADMUX_REG,6) ; 
 5c2:	87 b1       	in	r24, 0x07	; 7
 5c4:	80 64       	ori	r24, 0x40	; 64
 5c6:	87 b9       	out	0x07, r24	; 7
            	CLR_BIT(ADMUX_REG,7) ; 
 5c8:	87 b1       	in	r24, 0x07	; 7
 5ca:	8f 77       	andi	r24, 0x7F	; 127
 5cc:	87 b9       	out	0x07, r24	; 7
	           /* SET ADC PRESCALER */
	           ADCSRA_REG&=0b11111000 ;                                      
 5ce:	86 b1       	in	r24, 0x06	; 6
 5d0:	88 7f       	andi	r24, 0xF8	; 248
 5d2:	86 b9       	out	0x06, r24	; 6
	           ADCSRA_REG|=ADC_PRESCALER ;        
 5d4:	86 b1       	in	r24, 0x06	; 6
 5d6:	87 60       	ori	r24, 0x07	; 7
 5d8:	86 b9       	out	0x06, r24	; 6
			   
	                                   
	
	/* enable adc */
	SET_BIT(ADCSRA_REG,7) ; 
 5da:	86 b1       	in	r24, 0x06	; 6
 5dc:	80 68       	ori	r24, 0x80	; 128
 5de:	86 b9       	out	0x06, r24	; 6
 5e0:	08 95       	ret

000005e2 <ADC_u16ReadChannel>:
	
}

u16 ADC_u16ReadChannel(u8 copy_u8channel){
	
	ADMUX_REG&=0b11100000 ; 
 5e2:	97 b1       	in	r25, 0x07	; 7
 5e4:	90 7e       	andi	r25, 0xE0	; 224
 5e6:	97 b9       	out	0x07, r25	; 7
	ADMUX_REG|=copy_u8channel ; 
 5e8:	97 b1       	in	r25, 0x07	; 7
 5ea:	89 2b       	or	r24, r25
 5ec:	87 b9       	out	0x07, r24	; 7
	
	/* start conversion */
	SET_BIT(ADCSRA_REG,6) ; 
 5ee:	86 b1       	in	r24, 0x06	; 6
 5f0:	80 64       	ori	r24, 0x40	; 64
 5f2:	86 b9       	out	0x06, r24	; 6
	
	while(GET_BIT(ADCSRA_REG,4)==0) ; 
 5f4:	34 9b       	sbis	0x06, 4	; 6
 5f6:	fe cf       	rjmp	.-4      	; 0x5f4 <ADC_u16ReadChannel+0x12>
	
	return  ADC_REG ; 
 5f8:	84 b1       	in	r24, 0x04	; 4
 5fa:	95 b1       	in	r25, 0x05	; 5
	
	
	
 5fc:	08 95       	ret

000005fe <DIO_voidSetPinDir>:
#include "DIO_reg.h"

 
void DIO_voidSetPinDir(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8Dir){
	
	if (copy_u8Dir==OUTPUT){
 5fe:	41 30       	cpi	r20, 0x01	; 1
 600:	a1 f5       	brne	.+104    	; 0x66a <DIO_voidSetPinDir+0x6c>
		
		switch(copy_u8port){
 602:	81 30       	cpi	r24, 0x01	; 1
 604:	89 f0       	breq	.+34     	; 0x628 <DIO_voidSetPinDir+0x2a>
 606:	28 f0       	brcs	.+10     	; 0x612 <DIO_voidSetPinDir+0x14>
 608:	82 30       	cpi	r24, 0x02	; 2
 60a:	c9 f0       	breq	.+50     	; 0x63e <DIO_voidSetPinDir+0x40>
 60c:	83 30       	cpi	r24, 0x03	; 3
 60e:	11 f1       	breq	.+68     	; 0x654 <DIO_voidSetPinDir+0x56>
 610:	08 95       	ret
			
		case DIO_PORTA : SET_BIT(DDRA_REG,copy_u8pin);break;
 612:	2a b3       	in	r18, 0x1a	; 26
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_voidSetPinDir+0x20>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	6a 95       	dec	r22
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_voidSetPinDir+0x1c>
 622:	82 2b       	or	r24, r18
 624:	8a bb       	out	0x1a, r24	; 26
 626:	08 95       	ret
		case DIO_PORTB : SET_BIT(DDRB_REG,copy_u8pin);break;
 628:	27 b3       	in	r18, 0x17	; 23
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_voidSetPinDir+0x36>
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	6a 95       	dec	r22
 636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_voidSetPinDir+0x32>
 638:	82 2b       	or	r24, r18
 63a:	87 bb       	out	0x17, r24	; 23
 63c:	08 95       	ret
		case DIO_PORTC : SET_BIT(DDRC_REG,copy_u8pin);break;
 63e:	24 b3       	in	r18, 0x14	; 20
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_voidSetPinDir+0x4c>
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	6a 95       	dec	r22
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_voidSetPinDir+0x48>
 64e:	82 2b       	or	r24, r18
 650:	84 bb       	out	0x14, r24	; 20
 652:	08 95       	ret
		case DIO_PORTD : SET_BIT(DDRD_REG,copy_u8pin);break;
 654:	21 b3       	in	r18, 0x11	; 17
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_voidSetPinDir+0x62>
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	6a 95       	dec	r22
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_voidSetPinDir+0x5e>
 664:	82 2b       	or	r24, r18
 666:	81 bb       	out	0x11, r24	; 17
 668:	08 95       	ret
		
		}	
	}
	else if(copy_u8Dir== INPUT){
 66a:	41 11       	cpse	r20, r1
 66c:	37 c0       	rjmp	.+110    	; 0x6dc <DIO_voidSetPinDir+0xde>
		
		switch(copy_u8port){
 66e:	81 30       	cpi	r24, 0x01	; 1
 670:	91 f0       	breq	.+36     	; 0x696 <DIO_voidSetPinDir+0x98>
 672:	28 f0       	brcs	.+10     	; 0x67e <DIO_voidSetPinDir+0x80>
 674:	82 30       	cpi	r24, 0x02	; 2
 676:	d9 f0       	breq	.+54     	; 0x6ae <DIO_voidSetPinDir+0xb0>
 678:	83 30       	cpi	r24, 0x03	; 3
 67a:	29 f1       	breq	.+74     	; 0x6c6 <DIO_voidSetPinDir+0xc8>
 67c:	08 95       	ret
			
			case DIO_PORTA : CLR_BIT(DDRA_REG,copy_u8pin);break;
 67e:	2a b3       	in	r18, 0x1a	; 26
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_voidSetPinDir+0x8c>
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	6a 95       	dec	r22
 68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_voidSetPinDir+0x88>
 68e:	80 95       	com	r24
 690:	82 23       	and	r24, r18
 692:	8a bb       	out	0x1a, r24	; 26
 694:	08 95       	ret
			case DIO_PORTB : CLR_BIT(DDRB_REG,copy_u8pin);break;
 696:	27 b3       	in	r18, 0x17	; 23
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <DIO_voidSetPinDir+0xa4>
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	6a 95       	dec	r22
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <DIO_voidSetPinDir+0xa0>
 6a6:	80 95       	com	r24
 6a8:	82 23       	and	r24, r18
 6aa:	87 bb       	out	0x17, r24	; 23
 6ac:	08 95       	ret
			case DIO_PORTC : CLR_BIT(DDRC_REG,copy_u8pin);break;
 6ae:	24 b3       	in	r18, 0x14	; 20
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <DIO_voidSetPinDir+0xbc>
 6b6:	88 0f       	add	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	6a 95       	dec	r22
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <DIO_voidSetPinDir+0xb8>
 6be:	80 95       	com	r24
 6c0:	82 23       	and	r24, r18
 6c2:	84 bb       	out	0x14, r24	; 20
 6c4:	08 95       	ret
			case DIO_PORTD : CLR_BIT(DDRD_REG,copy_u8pin);break;
 6c6:	21 b3       	in	r18, 0x11	; 17
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_voidSetPinDir+0xd4>
 6ce:	88 0f       	add	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	6a 95       	dec	r22
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_voidSetPinDir+0xd0>
 6d6:	80 95       	com	r24
 6d8:	82 23       	and	r24, r18
 6da:	81 bb       	out	0x11, r24	; 17
 6dc:	08 95       	ret

000006de <DIO_voidSetPinVal>:
	}
}

void DIO_voidSetPinVal(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8val){
	
	if (copy_u8val==HIGH){
 6de:	41 30       	cpi	r20, 0x01	; 1
 6e0:	a1 f5       	brne	.+104    	; 0x74a <DIO_voidSetPinVal+0x6c>
		
		switch(copy_u8port){
 6e2:	81 30       	cpi	r24, 0x01	; 1
 6e4:	89 f0       	breq	.+34     	; 0x708 <DIO_voidSetPinVal+0x2a>
 6e6:	28 f0       	brcs	.+10     	; 0x6f2 <DIO_voidSetPinVal+0x14>
 6e8:	82 30       	cpi	r24, 0x02	; 2
 6ea:	c9 f0       	breq	.+50     	; 0x71e <DIO_voidSetPinVal+0x40>
 6ec:	83 30       	cpi	r24, 0x03	; 3
 6ee:	11 f1       	breq	.+68     	; 0x734 <DIO_voidSetPinVal+0x56>
 6f0:	08 95       	ret
			
			case DIO_PORTA : SET_BIT(PORTA_REG,copy_u8pin);break;
 6f2:	2b b3       	in	r18, 0x1b	; 27
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DIO_voidSetPinVal+0x20>
 6fa:	88 0f       	add	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	6a 95       	dec	r22
 700:	e2 f7       	brpl	.-8      	; 0x6fa <DIO_voidSetPinVal+0x1c>
 702:	82 2b       	or	r24, r18
 704:	8b bb       	out	0x1b, r24	; 27
 706:	08 95       	ret
			case DIO_PORTB : SET_BIT(PORTB_REG,copy_u8pin);break;
 708:	28 b3       	in	r18, 0x18	; 24
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	02 c0       	rjmp	.+4      	; 0x714 <DIO_voidSetPinVal+0x36>
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	6a 95       	dec	r22
 716:	e2 f7       	brpl	.-8      	; 0x710 <DIO_voidSetPinVal+0x32>
 718:	82 2b       	or	r24, r18
 71a:	88 bb       	out	0x18, r24	; 24
 71c:	08 95       	ret
			case DIO_PORTC : SET_BIT(PORTC_REG,copy_u8pin);break;
 71e:	25 b3       	in	r18, 0x15	; 21
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_voidSetPinVal+0x4c>
 726:	88 0f       	add	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	6a 95       	dec	r22
 72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_voidSetPinVal+0x48>
 72e:	82 2b       	or	r24, r18
 730:	85 bb       	out	0x15, r24	; 21
 732:	08 95       	ret
			case DIO_PORTD : SET_BIT(PORTD_REG,copy_u8pin);break;
 734:	22 b3       	in	r18, 0x12	; 18
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	02 c0       	rjmp	.+4      	; 0x740 <DIO_voidSetPinVal+0x62>
 73c:	88 0f       	add	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	6a 95       	dec	r22
 742:	e2 f7       	brpl	.-8      	; 0x73c <DIO_voidSetPinVal+0x5e>
 744:	82 2b       	or	r24, r18
 746:	82 bb       	out	0x12, r24	; 18
 748:	08 95       	ret
			}
	}
	
	else if(copy_u8val==LOW){
 74a:	41 11       	cpse	r20, r1
 74c:	37 c0       	rjmp	.+110    	; 0x7bc <DIO_voidSetPinVal+0xde>
		
		switch(copy_u8port){
 74e:	81 30       	cpi	r24, 0x01	; 1
 750:	91 f0       	breq	.+36     	; 0x776 <DIO_voidSetPinVal+0x98>
 752:	28 f0       	brcs	.+10     	; 0x75e <DIO_voidSetPinVal+0x80>
 754:	82 30       	cpi	r24, 0x02	; 2
 756:	d9 f0       	breq	.+54     	; 0x78e <DIO_voidSetPinVal+0xb0>
 758:	83 30       	cpi	r24, 0x03	; 3
 75a:	29 f1       	breq	.+74     	; 0x7a6 <DIO_voidSetPinVal+0xc8>
 75c:	08 95       	ret
			
			case DIO_PORTA : CLR_BIT(PORTA_REG,copy_u8pin);break;
 75e:	2b b3       	in	r18, 0x1b	; 27
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	02 c0       	rjmp	.+4      	; 0x76a <DIO_voidSetPinVal+0x8c>
 766:	88 0f       	add	r24, r24
 768:	99 1f       	adc	r25, r25
 76a:	6a 95       	dec	r22
 76c:	e2 f7       	brpl	.-8      	; 0x766 <DIO_voidSetPinVal+0x88>
 76e:	80 95       	com	r24
 770:	82 23       	and	r24, r18
 772:	8b bb       	out	0x1b, r24	; 27
 774:	08 95       	ret
			case DIO_PORTB : CLR_BIT(PORTB_REG,copy_u8pin);break;
 776:	28 b3       	in	r18, 0x18	; 24
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_voidSetPinVal+0xa4>
 77e:	88 0f       	add	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	6a 95       	dec	r22
 784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_voidSetPinVal+0xa0>
 786:	80 95       	com	r24
 788:	82 23       	and	r24, r18
 78a:	88 bb       	out	0x18, r24	; 24
 78c:	08 95       	ret
			case DIO_PORTC : CLR_BIT(PORTC_REG,copy_u8pin);break;
 78e:	25 b3       	in	r18, 0x15	; 21
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	02 c0       	rjmp	.+4      	; 0x79a <DIO_voidSetPinVal+0xbc>
 796:	88 0f       	add	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	6a 95       	dec	r22
 79c:	e2 f7       	brpl	.-8      	; 0x796 <DIO_voidSetPinVal+0xb8>
 79e:	80 95       	com	r24
 7a0:	82 23       	and	r24, r18
 7a2:	85 bb       	out	0x15, r24	; 21
 7a4:	08 95       	ret
			case DIO_PORTD : CLR_BIT(PORTD_REG,copy_u8pin);break;
 7a6:	22 b3       	in	r18, 0x12	; 18
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <DIO_voidSetPinVal+0xd4>
 7ae:	88 0f       	add	r24, r24
 7b0:	99 1f       	adc	r25, r25
 7b2:	6a 95       	dec	r22
 7b4:	e2 f7       	brpl	.-8      	; 0x7ae <DIO_voidSetPinVal+0xd0>
 7b6:	80 95       	com	r24
 7b8:	82 23       	and	r24, r18
 7ba:	82 bb       	out	0x12, r24	; 18
 7bc:	08 95       	ret

000007be <DIO_voidToggelPinVal>:


void DIO_voidToggelPinVal(u8 copy_u8port, u8 copy_u8pin){
	
	
		switch(copy_u8port){
 7be:	81 30       	cpi	r24, 0x01	; 1
 7c0:	89 f0       	breq	.+34     	; 0x7e4 <DIO_voidToggelPinVal+0x26>
 7c2:	28 f0       	brcs	.+10     	; 0x7ce <DIO_voidToggelPinVal+0x10>
 7c4:	82 30       	cpi	r24, 0x02	; 2
 7c6:	c9 f0       	breq	.+50     	; 0x7fa <DIO_voidToggelPinVal+0x3c>
 7c8:	83 30       	cpi	r24, 0x03	; 3
 7ca:	11 f1       	breq	.+68     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7cc:	08 95       	ret
			
			case DIO_PORTA : TOGGLE_BIT(PORTA_REG,copy_u8pin);break;
 7ce:	2b b3       	in	r18, 0x1b	; 27
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <DIO_voidToggelPinVal+0x1c>
 7d6:	88 0f       	add	r24, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	6a 95       	dec	r22
 7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <DIO_voidToggelPinVal+0x18>
 7de:	82 27       	eor	r24, r18
 7e0:	8b bb       	out	0x1b, r24	; 27
 7e2:	08 95       	ret
			case DIO_PORTB : TOGGLE_BIT(PORTB_REG,copy_u8pin);break;
 7e4:	28 b3       	in	r18, 0x18	; 24
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_voidToggelPinVal+0x32>
 7ec:	88 0f       	add	r24, r24
 7ee:	99 1f       	adc	r25, r25
 7f0:	6a 95       	dec	r22
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_voidToggelPinVal+0x2e>
 7f4:	82 27       	eor	r24, r18
 7f6:	88 bb       	out	0x18, r24	; 24
 7f8:	08 95       	ret
			case DIO_PORTC : TOGGLE_BIT(PORTC_REG,copy_u8pin);break;
 7fa:	25 b3       	in	r18, 0x15	; 21
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	02 c0       	rjmp	.+4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 802:	88 0f       	add	r24, r24
 804:	99 1f       	adc	r25, r25
 806:	6a 95       	dec	r22
 808:	e2 f7       	brpl	.-8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 80a:	82 27       	eor	r24, r18
 80c:	85 bb       	out	0x15, r24	; 21
 80e:	08 95       	ret
			case DIO_PORTD : TOGGLE_BIT(PORTD_REG,copy_u8pin);break;
 810:	22 b3       	in	r18, 0x12	; 18
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	02 c0       	rjmp	.+4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 818:	88 0f       	add	r24, r24
 81a:	99 1f       	adc	r25, r25
 81c:	6a 95       	dec	r22
 81e:	e2 f7       	brpl	.-8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 820:	82 27       	eor	r24, r18
 822:	82 bb       	out	0x12, r24	; 18
 824:	08 95       	ret

00000826 <DIO_u8ReadPinVal>:
}

u8 DIO_u8ReadPinVal(u8 copy_u8port, u8 copy_u8pin){
	
	u8 LOC_u8val=0;
	switch(copy_u8port){
 826:	81 30       	cpi	r24, 0x01	; 1
 828:	79 f0       	breq	.+30     	; 0x848 <DIO_u8ReadPinVal+0x22>
 82a:	28 f0       	brcs	.+10     	; 0x836 <DIO_u8ReadPinVal+0x10>
 82c:	82 30       	cpi	r24, 0x02	; 2
 82e:	a9 f0       	breq	.+42     	; 0x85a <DIO_u8ReadPinVal+0x34>
 830:	83 30       	cpi	r24, 0x03	; 3
 832:	e1 f0       	breq	.+56     	; 0x86c <__stack+0xd>
 834:	24 c0       	rjmp	.+72     	; 0x87e <__stack+0x1f>
		
		case DIO_PORTA :LOC_u8val= GET_BIT(PINA_REG,copy_u8pin);break;
 836:	89 b3       	in	r24, 0x19	; 25
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	02 c0       	rjmp	.+4      	; 0x840 <DIO_u8ReadPinVal+0x1a>
 83c:	95 95       	asr	r25
 83e:	87 95       	ror	r24
 840:	6a 95       	dec	r22
 842:	e2 f7       	brpl	.-8      	; 0x83c <DIO_u8ReadPinVal+0x16>
 844:	81 70       	andi	r24, 0x01	; 1
 846:	08 95       	ret
		case DIO_PORTB :LOC_u8val= GET_BIT(PINB_REG,copy_u8pin);break;
 848:	86 b3       	in	r24, 0x16	; 22
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	02 c0       	rjmp	.+4      	; 0x852 <DIO_u8ReadPinVal+0x2c>
 84e:	95 95       	asr	r25
 850:	87 95       	ror	r24
 852:	6a 95       	dec	r22
 854:	e2 f7       	brpl	.-8      	; 0x84e <DIO_u8ReadPinVal+0x28>
 856:	81 70       	andi	r24, 0x01	; 1
 858:	08 95       	ret
		case DIO_PORTC :LOC_u8val= GET_BIT(PINC_REG,copy_u8pin);break;
 85a:	83 b3       	in	r24, 0x13	; 19
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
 860:	95 95       	asr	r25
 862:	87 95       	ror	r24
 864:	6a 95       	dec	r22
 866:	e2 f7       	brpl	.-8      	; 0x860 <__stack+0x1>
 868:	81 70       	andi	r24, 0x01	; 1
 86a:	08 95       	ret
		case DIO_PORTD :LOC_u8val= GET_BIT(PIND_REG,copy_u8pin);break;
 86c:	80 b3       	in	r24, 0x10	; 16
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	02 c0       	rjmp	.+4      	; 0x876 <__stack+0x17>
 872:	95 95       	asr	r25
 874:	87 95       	ror	r24
 876:	6a 95       	dec	r22
 878:	e2 f7       	brpl	.-8      	; 0x872 <__stack+0x13>
 87a:	81 70       	andi	r24, 0x01	; 1
 87c:	08 95       	ret
		}	
}

u8 DIO_u8ReadPinVal(u8 copy_u8port, u8 copy_u8pin){
	
	u8 LOC_u8val=0;
 87e:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTB :LOC_u8val= GET_BIT(PINB_REG,copy_u8pin);break;
		case DIO_PORTC :LOC_u8val= GET_BIT(PINC_REG,copy_u8pin);break;
		case DIO_PORTD :LOC_u8val= GET_BIT(PIND_REG,copy_u8pin);break;
	}
	return LOC_u8val;
}
 880:	08 95       	ret

00000882 <DIO_voidSetPortDir>:


void DIO_voidSetPortDir(u8 copy_u8port,  u8 copy_u8Dir){
	switch(copy_u8port){
 882:	81 30       	cpi	r24, 0x01	; 1
 884:	41 f0       	breq	.+16     	; 0x896 <DIO_voidSetPortDir+0x14>
 886:	28 f0       	brcs	.+10     	; 0x892 <DIO_voidSetPortDir+0x10>
 888:	82 30       	cpi	r24, 0x02	; 2
 88a:	39 f0       	breq	.+14     	; 0x89a <DIO_voidSetPortDir+0x18>
 88c:	83 30       	cpi	r24, 0x03	; 3
 88e:	39 f0       	breq	.+14     	; 0x89e <DIO_voidSetPortDir+0x1c>
 890:	08 95       	ret
		
		case DIO_PORTA : DDRA_REG = copy_u8Dir;break;
 892:	6a bb       	out	0x1a, r22	; 26
 894:	08 95       	ret
		case DIO_PORTB : DDRB_REG = copy_u8Dir;break;
 896:	67 bb       	out	0x17, r22	; 23
 898:	08 95       	ret
		case DIO_PORTC : DDRC_REG = copy_u8Dir;break;
 89a:	64 bb       	out	0x14, r22	; 20
 89c:	08 95       	ret
		case DIO_PORTD : DDRD_REG = copy_u8Dir;break;
 89e:	61 bb       	out	0x11, r22	; 17
 8a0:	08 95       	ret

000008a2 <DIO_voidSetPortVal>:
}


void DIO_voidSetPortVal(u8 copy_u8port,  u8 copy_u8val){
	
	switch(copy_u8port){
 8a2:	81 30       	cpi	r24, 0x01	; 1
 8a4:	41 f0       	breq	.+16     	; 0x8b6 <DIO_voidSetPortVal+0x14>
 8a6:	28 f0       	brcs	.+10     	; 0x8b2 <DIO_voidSetPortVal+0x10>
 8a8:	82 30       	cpi	r24, 0x02	; 2
 8aa:	39 f0       	breq	.+14     	; 0x8ba <DIO_voidSetPortVal+0x18>
 8ac:	83 30       	cpi	r24, 0x03	; 3
 8ae:	39 f0       	breq	.+14     	; 0x8be <DIO_voidSetPortVal+0x1c>
 8b0:	08 95       	ret
		
		case DIO_PORTA : PORTA_REG = copy_u8val;break;
 8b2:	6b bb       	out	0x1b, r22	; 27
 8b4:	08 95       	ret
		case DIO_PORTB : PORTB_REG = copy_u8val;break;
 8b6:	68 bb       	out	0x18, r22	; 24
 8b8:	08 95       	ret
		case DIO_PORTC : PORTC_REG = copy_u8val;break;
 8ba:	65 bb       	out	0x15, r22	; 21
 8bc:	08 95       	ret
		case DIO_PORTD : PORTD_REG = copy_u8val;break;
 8be:	62 bb       	out	0x12, r22	; 18
 8c0:	08 95       	ret

000008c2 <GI_voidEnable>:



void GI_voidEnable(void){
	
	SET_BIT(SREG_REG,7) ; 
 8c2:	8f b7       	in	r24, 0x3f	; 63
 8c4:	80 68       	ori	r24, 0x80	; 128
 8c6:	8f bf       	out	0x3f, r24	; 63
 8c8:	08 95       	ret

000008ca <TIM0_voidOverFlowInit>:

void TIM0_voidOverFlowInit( u8 copy_u8mode) {
	
	/* select prescaler : see TIM0 interface */
	
	TCCR0_REG&=0b11111000 ;
 8ca:	93 b7       	in	r25, 0x33	; 51
 8cc:	98 7f       	andi	r25, 0xF8	; 248
 8ce:	93 bf       	out	0x33, r25	; 51
	TCCR0_REG|=TIM0_PRESCALER ;
 8d0:	93 b7       	in	r25, 0x33	; 51
 8d2:	93 60       	ori	r25, 0x03	; 3
 8d4:	93 bf       	out	0x33, r25	; 51
	
	if (copy_u8mode==OV_MODE)
 8d6:	81 11       	cpse	r24, r1
 8d8:	0a c0       	rjmp	.+20     	; 0x8ee <TIM0_voidOverFlowInit+0x24>
	{
			/* select mode : normal mode */
			CLR_BIT(TCCR0_REG,3) ;
 8da:	83 b7       	in	r24, 0x33	; 51
 8dc:	87 7f       	andi	r24, 0xF7	; 247
 8de:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0_REG,6) ;
 8e0:	83 b7       	in	r24, 0x33	; 51
 8e2:	8f 7b       	andi	r24, 0xBF	; 191
 8e4:	83 bf       	out	0x33, r24	; 51
				
				/* enable  overflow interrupt */
				SET_BIT(TIMSK_REG,0) ;
 8e6:	89 b7       	in	r24, 0x39	; 57
 8e8:	81 60       	ori	r24, 0x01	; 1
 8ea:	89 bf       	out	0x39, r24	; 57
 8ec:	08 95       	ret
	}
    else if (copy_u8mode==CTC_MODE)
 8ee:	81 30       	cpi	r24, 0x01	; 1
 8f0:	59 f4       	brne	.+22     	; 0x908 <TIM0_voidOverFlowInit+0x3e>
    {
		/* select mode : normal mode */
		SET_BIT(TCCR0_REG,3) ;
 8f2:	83 b7       	in	r24, 0x33	; 51
 8f4:	88 60       	ori	r24, 0x08	; 8
 8f6:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0_REG,6) ;
 8f8:	83 b7       	in	r24, 0x33	; 51
 8fa:	8f 7b       	andi	r24, 0xBF	; 191
 8fc:	83 bf       	out	0x33, r24	; 51
		
		OCR0_REG=OCR_VAL ; 
 8fe:	8a ef       	ldi	r24, 0xFA	; 250
 900:	8c bf       	out	0x3c, r24	; 60
		/* enable  overflow interrupt */
		SET_BIT(TIMSK_REG,1) ;
 902:	89 b7       	in	r24, 0x39	; 57
 904:	82 60       	ori	r24, 0x02	; 2
 906:	89 bf       	out	0x39, r24	; 57
 908:	08 95       	ret

0000090a <TIM0_voidSetCallBack>:
	
}

void TIM0_voidSetCallBack(void(*ptr)(void),u8 copu_u8mode){
	
	 switch(copu_u8mode){
 90a:	66 23       	and	r22, r22
 90c:	19 f0       	breq	.+6      	; 0x914 <TIM0_voidSetCallBack+0xa>
 90e:	61 30       	cpi	r22, 0x01	; 1
 910:	31 f0       	breq	.+12     	; 0x91e <TIM0_voidSetCallBack+0x14>
 912:	08 95       	ret
		 
		 case  OV_MODE : TIM0_PTR[0]=ptr ; break ; 
 914:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <TIM0_PTR+0x1>
 918:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <TIM0_PTR>
 91c:	08 95       	ret
		 case  CTC_MODE :TIM0_PTR[1]=ptr ; break ;
 91e:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <TIM0_PTR+0x3>
 922:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <TIM0_PTR+0x2>
 926:	08 95       	ret

00000928 <__vector_11>:
	
	
}


ISR(TIMER0_OVF){
 928:	1f 92       	push	r1
 92a:	0f 92       	push	r0
 92c:	0f b6       	in	r0, 0x3f	; 63
 92e:	0f 92       	push	r0
 930:	11 24       	eor	r1, r1
 932:	2f 93       	push	r18
 934:	3f 93       	push	r19
 936:	4f 93       	push	r20
 938:	5f 93       	push	r21
 93a:	6f 93       	push	r22
 93c:	7f 93       	push	r23
 93e:	8f 93       	push	r24
 940:	9f 93       	push	r25
 942:	af 93       	push	r26
 944:	bf 93       	push	r27
 946:	ef 93       	push	r30
 948:	ff 93       	push	r31
	
TIM0_PTR[0]() ; 
 94a:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <TIM0_PTR>
 94e:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <TIM0_PTR+0x1>
 952:	09 95       	icall
	
	
}
 954:	ff 91       	pop	r31
 956:	ef 91       	pop	r30
 958:	bf 91       	pop	r27
 95a:	af 91       	pop	r26
 95c:	9f 91       	pop	r25
 95e:	8f 91       	pop	r24
 960:	7f 91       	pop	r23
 962:	6f 91       	pop	r22
 964:	5f 91       	pop	r21
 966:	4f 91       	pop	r20
 968:	3f 91       	pop	r19
 96a:	2f 91       	pop	r18
 96c:	0f 90       	pop	r0
 96e:	0f be       	out	0x3f, r0	; 63
 970:	0f 90       	pop	r0
 972:	1f 90       	pop	r1
 974:	18 95       	reti

00000976 <__vector_10>:


ISR(TIMER0_COMP){
 976:	1f 92       	push	r1
 978:	0f 92       	push	r0
 97a:	0f b6       	in	r0, 0x3f	; 63
 97c:	0f 92       	push	r0
 97e:	11 24       	eor	r1, r1
 980:	2f 93       	push	r18
 982:	3f 93       	push	r19
 984:	4f 93       	push	r20
 986:	5f 93       	push	r21
 988:	6f 93       	push	r22
 98a:	7f 93       	push	r23
 98c:	8f 93       	push	r24
 98e:	9f 93       	push	r25
 990:	af 93       	push	r26
 992:	bf 93       	push	r27
 994:	ef 93       	push	r30
 996:	ff 93       	push	r31
	
	
TIM0_PTR[1]() ;
 998:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <TIM0_PTR+0x2>
 99c:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <TIM0_PTR+0x3>
 9a0:	09 95       	icall

}
 9a2:	ff 91       	pop	r31
 9a4:	ef 91       	pop	r30
 9a6:	bf 91       	pop	r27
 9a8:	af 91       	pop	r26
 9aa:	9f 91       	pop	r25
 9ac:	8f 91       	pop	r24
 9ae:	7f 91       	pop	r23
 9b0:	6f 91       	pop	r22
 9b2:	5f 91       	pop	r21
 9b4:	4f 91       	pop	r20
 9b6:	3f 91       	pop	r19
 9b8:	2f 91       	pop	r18
 9ba:	0f 90       	pop	r0
 9bc:	0f be       	out	0x3f, r0	; 63
 9be:	0f 90       	pop	r0
 9c0:	1f 90       	pop	r1
 9c2:	18 95       	reti

000009c4 <TWI_voidInitMaster>:
		while(TWI_STATUS_VALUE != TWI_STATUS_CODE_RECEIVE_MASTER_DATA_BYTE_ACK);
		
		*copy_pu8RxData = TWDR_REG;
		
		// Disable ACK pulse
		CLR_BIT(TWCR_REG, TWEA);
 9c4:	8c e0       	ldi	r24, 0x0C	; 12
 9c6:	80 b9       	out	0x00, r24	; 0
 9c8:	81 b1       	in	r24, 0x01	; 1
 9ca:	8e 7f       	andi	r24, 0xFE	; 254
 9cc:	81 b9       	out	0x01, r24	; 1
 9ce:	81 b1       	in	r24, 0x01	; 1
 9d0:	8d 7f       	andi	r24, 0xFD	; 253
 9d2:	81 b9       	out	0x01, r24	; 1
 9d4:	86 b7       	in	r24, 0x36	; 54
 9d6:	84 60       	ori	r24, 0x04	; 4
 9d8:	86 bf       	out	0x36, r24	; 54
 9da:	08 95       	ret

000009dc <TWI_voidSendStartCondition>:
 9dc:	86 b7       	in	r24, 0x36	; 54
 9de:	80 62       	ori	r24, 0x20	; 32
 9e0:	86 bf       	out	0x36, r24	; 54
 9e2:	86 b7       	in	r24, 0x36	; 54
 9e4:	80 68       	ori	r24, 0x80	; 128
 9e6:	86 bf       	out	0x36, r24	; 54
 9e8:	06 b6       	in	r0, 0x36	; 54
 9ea:	07 fe       	sbrs	r0, 7
 9ec:	fd cf       	rjmp	.-6      	; 0x9e8 <TWI_voidSendStartCondition+0xc>
 9ee:	81 b1       	in	r24, 0x01	; 1
 9f0:	88 7f       	andi	r24, 0xF8	; 248
 9f2:	88 30       	cpi	r24, 0x08	; 8
 9f4:	e1 f7       	brne	.-8      	; 0x9ee <TWI_voidSendStartCondition+0x12>
 9f6:	08 95       	ret

000009f8 <TWI_voidSendRepStartCondition>:
 9f8:	86 b7       	in	r24, 0x36	; 54
 9fa:	80 62       	ori	r24, 0x20	; 32
 9fc:	86 bf       	out	0x36, r24	; 54
 9fe:	86 b7       	in	r24, 0x36	; 54
 a00:	80 68       	ori	r24, 0x80	; 128
 a02:	86 bf       	out	0x36, r24	; 54
 a04:	06 b6       	in	r0, 0x36	; 54
 a06:	07 fe       	sbrs	r0, 7
 a08:	fd cf       	rjmp	.-6      	; 0xa04 <TWI_voidSendRepStartCondition+0xc>
 a0a:	81 b1       	in	r24, 0x01	; 1
 a0c:	88 7f       	andi	r24, 0xF8	; 248
 a0e:	80 31       	cpi	r24, 0x10	; 16
 a10:	e1 f7       	brne	.-8      	; 0xa0a <TWI_voidSendRepStartCondition+0x12>
 a12:	08 95       	ret

00000a14 <TWI_voidSendStopCondition>:
 a14:	86 b7       	in	r24, 0x36	; 54
 a16:	80 61       	ori	r24, 0x10	; 16
 a18:	86 bf       	out	0x36, r24	; 54
 a1a:	86 b7       	in	r24, 0x36	; 54
 a1c:	80 68       	ori	r24, 0x80	; 128
 a1e:	86 bf       	out	0x36, r24	; 54
 a20:	08 95       	ret

00000a22 <TWI_voidSendSlaveAddWithWrite>:
 a22:	88 23       	and	r24, r24
 a24:	94 f0       	brlt	.+36     	; 0xa4a <TWI_voidSendSlaveAddWithWrite+0x28>
 a26:	88 0f       	add	r24, r24
 a28:	83 b9       	out	0x03, r24	; 3
 a2a:	83 b1       	in	r24, 0x03	; 3
 a2c:	8e 7f       	andi	r24, 0xFE	; 254
 a2e:	83 b9       	out	0x03, r24	; 3
 a30:	86 b7       	in	r24, 0x36	; 54
 a32:	8f 7d       	andi	r24, 0xDF	; 223
 a34:	86 bf       	out	0x36, r24	; 54
 a36:	86 b7       	in	r24, 0x36	; 54
 a38:	80 68       	ori	r24, 0x80	; 128
 a3a:	86 bf       	out	0x36, r24	; 54
 a3c:	06 b6       	in	r0, 0x36	; 54
 a3e:	07 fe       	sbrs	r0, 7
 a40:	fd cf       	rjmp	.-6      	; 0xa3c <TWI_voidSendSlaveAddWithWrite+0x1a>
 a42:	81 b1       	in	r24, 0x01	; 1
 a44:	88 7f       	andi	r24, 0xF8	; 248
 a46:	88 31       	cpi	r24, 0x18	; 24
 a48:	e1 f7       	brne	.-8      	; 0xa42 <TWI_voidSendSlaveAddWithWrite+0x20>
 a4a:	08 95       	ret

00000a4c <TWI_voidSendSlaveAddWithRead>:
 a4c:	88 23       	and	r24, r24
 a4e:	94 f0       	brlt	.+36     	; 0xa74 <TWI_voidSendSlaveAddWithRead+0x28>
 a50:	88 0f       	add	r24, r24
 a52:	83 b9       	out	0x03, r24	; 3
 a54:	83 b1       	in	r24, 0x03	; 3
 a56:	81 60       	ori	r24, 0x01	; 1
 a58:	83 b9       	out	0x03, r24	; 3
 a5a:	86 b7       	in	r24, 0x36	; 54
 a5c:	8f 7d       	andi	r24, 0xDF	; 223
 a5e:	86 bf       	out	0x36, r24	; 54
 a60:	86 b7       	in	r24, 0x36	; 54
 a62:	80 68       	ori	r24, 0x80	; 128
 a64:	86 bf       	out	0x36, r24	; 54
 a66:	06 b6       	in	r0, 0x36	; 54
 a68:	07 fe       	sbrs	r0, 7
 a6a:	fd cf       	rjmp	.-6      	; 0xa66 <TWI_voidSendSlaveAddWithRead+0x1a>
 a6c:	81 b1       	in	r24, 0x01	; 1
 a6e:	88 7f       	andi	r24, 0xF8	; 248
 a70:	80 34       	cpi	r24, 0x40	; 64
 a72:	e1 f7       	brne	.-8      	; 0xa6c <TWI_voidSendSlaveAddWithRead+0x20>
 a74:	08 95       	ret

00000a76 <TWI_voidTransmitMasterDataByte>:
 a76:	83 b9       	out	0x03, r24	; 3
 a78:	86 b7       	in	r24, 0x36	; 54
 a7a:	80 68       	ori	r24, 0x80	; 128
 a7c:	86 bf       	out	0x36, r24	; 54
 a7e:	06 b6       	in	r0, 0x36	; 54
 a80:	07 fe       	sbrs	r0, 7
 a82:	fd cf       	rjmp	.-6      	; 0xa7e <TWI_voidTransmitMasterDataByte+0x8>
 a84:	81 b1       	in	r24, 0x01	; 1
 a86:	88 7f       	andi	r24, 0xF8	; 248
 a88:	88 32       	cpi	r24, 0x28	; 40
 a8a:	e1 f7       	brne	.-8      	; 0xa84 <TWI_voidTransmitMasterDataByte+0xe>
 a8c:	08 95       	ret

00000a8e <TWI_voidReceiveMasterDataByteWithoutACK>:
	}
}


void TWI_voidReceiveMasterDataByteWithoutACK(u8* copy_pu8RxData)
{
 a8e:	fc 01       	movw	r30, r24
	if(copy_pu8RxData != null )
 a90:	89 2b       	or	r24, r25
 a92:	61 f0       	breq	.+24     	; 0xaac <TWI_voidReceiveMasterDataByteWithoutACK+0x1e>
	{
		// Clear flag to start current job
		SET_BIT(TWCR_REG, TWINT);
 a94:	96 b7       	in	r25, 0x36	; 54
 a96:	90 68       	ori	r25, 0x80	; 128
 a98:	96 bf       	out	0x36, r25	; 54
		
		// Busy wait for flag
		while(0 == GET_BIT(TWCR_REG, TWINT));
 a9a:	06 b6       	in	r0, 0x36	; 54
 a9c:	07 fe       	sbrs	r0, 7
 a9e:	fd cf       	rjmp	.-6      	; 0xa9a <TWI_voidReceiveMasterDataByteWithoutACK+0xc>
		
		// Check Status code = Receive master data byte without ACK Status code
		while(TWI_STATUS_VALUE != TWI_STATUS_CODE_RECEIVE_MASTER_DATA_BYTE_NACK);
 aa0:	91 b1       	in	r25, 0x01	; 1
 aa2:	98 7f       	andi	r25, 0xF8	; 248
 aa4:	98 35       	cpi	r25, 0x58	; 88
 aa6:	e1 f7       	brne	.-8      	; 0xaa0 <TWI_voidReceiveMasterDataByteWithoutACK+0x12>
		
		*copy_pu8RxData = TWDR_REG;
 aa8:	83 b1       	in	r24, 0x03	; 3
 aaa:	80 83       	st	Z, r24
 aac:	08 95       	ret

00000aae <__fixunssfsi>:
 aae:	0e 94 cb 05 	call	0xb96	; 0xb96 <__fp_splitA>
 ab2:	88 f0       	brcs	.+34     	; 0xad6 <__fixunssfsi+0x28>
 ab4:	9f 57       	subi	r25, 0x7F	; 127
 ab6:	98 f0       	brcs	.+38     	; 0xade <__fixunssfsi+0x30>
 ab8:	b9 2f       	mov	r27, r25
 aba:	99 27       	eor	r25, r25
 abc:	b7 51       	subi	r27, 0x17	; 23
 abe:	b0 f0       	brcs	.+44     	; 0xaec <__fixunssfsi+0x3e>
 ac0:	e1 f0       	breq	.+56     	; 0xafa <__fixunssfsi+0x4c>
 ac2:	66 0f       	add	r22, r22
 ac4:	77 1f       	adc	r23, r23
 ac6:	88 1f       	adc	r24, r24
 ac8:	99 1f       	adc	r25, r25
 aca:	1a f0       	brmi	.+6      	; 0xad2 <__fixunssfsi+0x24>
 acc:	ba 95       	dec	r27
 ace:	c9 f7       	brne	.-14     	; 0xac2 <__fixunssfsi+0x14>
 ad0:	14 c0       	rjmp	.+40     	; 0xafa <__fixunssfsi+0x4c>
 ad2:	b1 30       	cpi	r27, 0x01	; 1
 ad4:	91 f0       	breq	.+36     	; 0xafa <__fixunssfsi+0x4c>
 ad6:	0e 94 e5 05 	call	0xbca	; 0xbca <__fp_zero>
 ada:	b1 e0       	ldi	r27, 0x01	; 1
 adc:	08 95       	ret
 ade:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__fp_zero>
 ae2:	67 2f       	mov	r22, r23
 ae4:	78 2f       	mov	r23, r24
 ae6:	88 27       	eor	r24, r24
 ae8:	b8 5f       	subi	r27, 0xF8	; 248
 aea:	39 f0       	breq	.+14     	; 0xafa <__fixunssfsi+0x4c>
 aec:	b9 3f       	cpi	r27, 0xF9	; 249
 aee:	cc f3       	brlt	.-14     	; 0xae2 <__fixunssfsi+0x34>
 af0:	86 95       	lsr	r24
 af2:	77 95       	ror	r23
 af4:	67 95       	ror	r22
 af6:	b3 95       	inc	r27
 af8:	d9 f7       	brne	.-10     	; 0xaf0 <__fixunssfsi+0x42>
 afa:	3e f4       	brtc	.+14     	; 0xb0a <__fixunssfsi+0x5c>
 afc:	90 95       	com	r25
 afe:	80 95       	com	r24
 b00:	70 95       	com	r23
 b02:	61 95       	neg	r22
 b04:	7f 4f       	sbci	r23, 0xFF	; 255
 b06:	8f 4f       	sbci	r24, 0xFF	; 255
 b08:	9f 4f       	sbci	r25, 0xFF	; 255
 b0a:	08 95       	ret

00000b0c <__floatunsisf>:
 b0c:	e8 94       	clt
 b0e:	09 c0       	rjmp	.+18     	; 0xb22 <__floatsisf+0x12>

00000b10 <__floatsisf>:
 b10:	97 fb       	bst	r25, 7
 b12:	3e f4       	brtc	.+14     	; 0xb22 <__floatsisf+0x12>
 b14:	90 95       	com	r25
 b16:	80 95       	com	r24
 b18:	70 95       	com	r23
 b1a:	61 95       	neg	r22
 b1c:	7f 4f       	sbci	r23, 0xFF	; 255
 b1e:	8f 4f       	sbci	r24, 0xFF	; 255
 b20:	9f 4f       	sbci	r25, 0xFF	; 255
 b22:	99 23       	and	r25, r25
 b24:	a9 f0       	breq	.+42     	; 0xb50 <__floatsisf+0x40>
 b26:	f9 2f       	mov	r31, r25
 b28:	96 e9       	ldi	r25, 0x96	; 150
 b2a:	bb 27       	eor	r27, r27
 b2c:	93 95       	inc	r25
 b2e:	f6 95       	lsr	r31
 b30:	87 95       	ror	r24
 b32:	77 95       	ror	r23
 b34:	67 95       	ror	r22
 b36:	b7 95       	ror	r27
 b38:	f1 11       	cpse	r31, r1
 b3a:	f8 cf       	rjmp	.-16     	; 0xb2c <__floatsisf+0x1c>
 b3c:	fa f4       	brpl	.+62     	; 0xb7c <__floatsisf+0x6c>
 b3e:	bb 0f       	add	r27, r27
 b40:	11 f4       	brne	.+4      	; 0xb46 <__floatsisf+0x36>
 b42:	60 ff       	sbrs	r22, 0
 b44:	1b c0       	rjmp	.+54     	; 0xb7c <__floatsisf+0x6c>
 b46:	6f 5f       	subi	r22, 0xFF	; 255
 b48:	7f 4f       	sbci	r23, 0xFF	; 255
 b4a:	8f 4f       	sbci	r24, 0xFF	; 255
 b4c:	9f 4f       	sbci	r25, 0xFF	; 255
 b4e:	16 c0       	rjmp	.+44     	; 0xb7c <__floatsisf+0x6c>
 b50:	88 23       	and	r24, r24
 b52:	11 f0       	breq	.+4      	; 0xb58 <__floatsisf+0x48>
 b54:	96 e9       	ldi	r25, 0x96	; 150
 b56:	11 c0       	rjmp	.+34     	; 0xb7a <__floatsisf+0x6a>
 b58:	77 23       	and	r23, r23
 b5a:	21 f0       	breq	.+8      	; 0xb64 <__floatsisf+0x54>
 b5c:	9e e8       	ldi	r25, 0x8E	; 142
 b5e:	87 2f       	mov	r24, r23
 b60:	76 2f       	mov	r23, r22
 b62:	05 c0       	rjmp	.+10     	; 0xb6e <__floatsisf+0x5e>
 b64:	66 23       	and	r22, r22
 b66:	71 f0       	breq	.+28     	; 0xb84 <__floatsisf+0x74>
 b68:	96 e8       	ldi	r25, 0x86	; 134
 b6a:	86 2f       	mov	r24, r22
 b6c:	70 e0       	ldi	r23, 0x00	; 0
 b6e:	60 e0       	ldi	r22, 0x00	; 0
 b70:	2a f0       	brmi	.+10     	; 0xb7c <__floatsisf+0x6c>
 b72:	9a 95       	dec	r25
 b74:	66 0f       	add	r22, r22
 b76:	77 1f       	adc	r23, r23
 b78:	88 1f       	adc	r24, r24
 b7a:	da f7       	brpl	.-10     	; 0xb72 <__floatsisf+0x62>
 b7c:	88 0f       	add	r24, r24
 b7e:	96 95       	lsr	r25
 b80:	87 95       	ror	r24
 b82:	97 f9       	bld	r25, 7
 b84:	08 95       	ret

00000b86 <__fp_split3>:
 b86:	57 fd       	sbrc	r21, 7
 b88:	90 58       	subi	r25, 0x80	; 128
 b8a:	44 0f       	add	r20, r20
 b8c:	55 1f       	adc	r21, r21
 b8e:	59 f0       	breq	.+22     	; 0xba6 <__fp_splitA+0x10>
 b90:	5f 3f       	cpi	r21, 0xFF	; 255
 b92:	71 f0       	breq	.+28     	; 0xbb0 <__fp_splitA+0x1a>
 b94:	47 95       	ror	r20

00000b96 <__fp_splitA>:
 b96:	88 0f       	add	r24, r24
 b98:	97 fb       	bst	r25, 7
 b9a:	99 1f       	adc	r25, r25
 b9c:	61 f0       	breq	.+24     	; 0xbb6 <__fp_splitA+0x20>
 b9e:	9f 3f       	cpi	r25, 0xFF	; 255
 ba0:	79 f0       	breq	.+30     	; 0xbc0 <__fp_splitA+0x2a>
 ba2:	87 95       	ror	r24
 ba4:	08 95       	ret
 ba6:	12 16       	cp	r1, r18
 ba8:	13 06       	cpc	r1, r19
 baa:	14 06       	cpc	r1, r20
 bac:	55 1f       	adc	r21, r21
 bae:	f2 cf       	rjmp	.-28     	; 0xb94 <__fp_split3+0xe>
 bb0:	46 95       	lsr	r20
 bb2:	f1 df       	rcall	.-30     	; 0xb96 <__fp_splitA>
 bb4:	08 c0       	rjmp	.+16     	; 0xbc6 <__fp_splitA+0x30>
 bb6:	16 16       	cp	r1, r22
 bb8:	17 06       	cpc	r1, r23
 bba:	18 06       	cpc	r1, r24
 bbc:	99 1f       	adc	r25, r25
 bbe:	f1 cf       	rjmp	.-30     	; 0xba2 <__fp_splitA+0xc>
 bc0:	86 95       	lsr	r24
 bc2:	71 05       	cpc	r23, r1
 bc4:	61 05       	cpc	r22, r1
 bc6:	08 94       	sec
 bc8:	08 95       	ret

00000bca <__fp_zero>:
 bca:	e8 94       	clt

00000bcc <__fp_szero>:
 bcc:	bb 27       	eor	r27, r27
 bce:	66 27       	eor	r22, r22
 bd0:	77 27       	eor	r23, r23
 bd2:	cb 01       	movw	r24, r22
 bd4:	97 f9       	bld	r25, 7
 bd6:	08 95       	ret

00000bd8 <__mulsf3>:
 bd8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__mulsf3x>
 bdc:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_round>
 be0:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_pscA>
 be4:	38 f0       	brcs	.+14     	; 0xbf4 <__mulsf3+0x1c>
 be6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fp_pscB>
 bea:	20 f0       	brcs	.+8      	; 0xbf4 <__mulsf3+0x1c>
 bec:	95 23       	and	r25, r21
 bee:	11 f0       	breq	.+4      	; 0xbf4 <__mulsf3+0x1c>
 bf0:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_inf>
 bf4:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_nan>
 bf8:	11 24       	eor	r1, r1
 bfa:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_szero>

00000bfe <__mulsf3x>:
 bfe:	0e 94 c3 05 	call	0xb86	; 0xb86 <__fp_split3>
 c02:	70 f3       	brcs	.-36     	; 0xbe0 <__mulsf3+0x8>

00000c04 <__mulsf3_pse>:
 c04:	95 9f       	mul	r25, r21
 c06:	c1 f3       	breq	.-16     	; 0xbf8 <__mulsf3+0x20>
 c08:	95 0f       	add	r25, r21
 c0a:	50 e0       	ldi	r21, 0x00	; 0
 c0c:	55 1f       	adc	r21, r21
 c0e:	62 9f       	mul	r22, r18
 c10:	f0 01       	movw	r30, r0
 c12:	72 9f       	mul	r23, r18
 c14:	bb 27       	eor	r27, r27
 c16:	f0 0d       	add	r31, r0
 c18:	b1 1d       	adc	r27, r1
 c1a:	63 9f       	mul	r22, r19
 c1c:	aa 27       	eor	r26, r26
 c1e:	f0 0d       	add	r31, r0
 c20:	b1 1d       	adc	r27, r1
 c22:	aa 1f       	adc	r26, r26
 c24:	64 9f       	mul	r22, r20
 c26:	66 27       	eor	r22, r22
 c28:	b0 0d       	add	r27, r0
 c2a:	a1 1d       	adc	r26, r1
 c2c:	66 1f       	adc	r22, r22
 c2e:	82 9f       	mul	r24, r18
 c30:	22 27       	eor	r18, r18
 c32:	b0 0d       	add	r27, r0
 c34:	a1 1d       	adc	r26, r1
 c36:	62 1f       	adc	r22, r18
 c38:	73 9f       	mul	r23, r19
 c3a:	b0 0d       	add	r27, r0
 c3c:	a1 1d       	adc	r26, r1
 c3e:	62 1f       	adc	r22, r18
 c40:	83 9f       	mul	r24, r19
 c42:	a0 0d       	add	r26, r0
 c44:	61 1d       	adc	r22, r1
 c46:	22 1f       	adc	r18, r18
 c48:	74 9f       	mul	r23, r20
 c4a:	33 27       	eor	r19, r19
 c4c:	a0 0d       	add	r26, r0
 c4e:	61 1d       	adc	r22, r1
 c50:	23 1f       	adc	r18, r19
 c52:	84 9f       	mul	r24, r20
 c54:	60 0d       	add	r22, r0
 c56:	21 1d       	adc	r18, r1
 c58:	82 2f       	mov	r24, r18
 c5a:	76 2f       	mov	r23, r22
 c5c:	6a 2f       	mov	r22, r26
 c5e:	11 24       	eor	r1, r1
 c60:	9f 57       	subi	r25, 0x7F	; 127
 c62:	50 40       	sbci	r21, 0x00	; 0
 c64:	9a f0       	brmi	.+38     	; 0xc8c <__mulsf3_pse+0x88>
 c66:	f1 f0       	breq	.+60     	; 0xca4 <__mulsf3_pse+0xa0>
 c68:	88 23       	and	r24, r24
 c6a:	4a f0       	brmi	.+18     	; 0xc7e <__mulsf3_pse+0x7a>
 c6c:	ee 0f       	add	r30, r30
 c6e:	ff 1f       	adc	r31, r31
 c70:	bb 1f       	adc	r27, r27
 c72:	66 1f       	adc	r22, r22
 c74:	77 1f       	adc	r23, r23
 c76:	88 1f       	adc	r24, r24
 c78:	91 50       	subi	r25, 0x01	; 1
 c7a:	50 40       	sbci	r21, 0x00	; 0
 c7c:	a9 f7       	brne	.-22     	; 0xc68 <__mulsf3_pse+0x64>
 c7e:	9e 3f       	cpi	r25, 0xFE	; 254
 c80:	51 05       	cpc	r21, r1
 c82:	80 f0       	brcs	.+32     	; 0xca4 <__mulsf3_pse+0xa0>
 c84:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_inf>
 c88:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_szero>
 c8c:	5f 3f       	cpi	r21, 0xFF	; 255
 c8e:	e4 f3       	brlt	.-8      	; 0xc88 <__mulsf3_pse+0x84>
 c90:	98 3e       	cpi	r25, 0xE8	; 232
 c92:	d4 f3       	brlt	.-12     	; 0xc88 <__mulsf3_pse+0x84>
 c94:	86 95       	lsr	r24
 c96:	77 95       	ror	r23
 c98:	67 95       	ror	r22
 c9a:	b7 95       	ror	r27
 c9c:	f7 95       	ror	r31
 c9e:	e7 95       	ror	r30
 ca0:	9f 5f       	subi	r25, 0xFF	; 255
 ca2:	c1 f7       	brne	.-16     	; 0xc94 <__mulsf3_pse+0x90>
 ca4:	fe 2b       	or	r31, r30
 ca6:	88 0f       	add	r24, r24
 ca8:	91 1d       	adc	r25, r1
 caa:	96 95       	lsr	r25
 cac:	87 95       	ror	r24
 cae:	97 f9       	bld	r25, 7
 cb0:	08 95       	ret

00000cb2 <__fp_inf>:
 cb2:	97 f9       	bld	r25, 7
 cb4:	9f 67       	ori	r25, 0x7F	; 127
 cb6:	80 e8       	ldi	r24, 0x80	; 128
 cb8:	70 e0       	ldi	r23, 0x00	; 0
 cba:	60 e0       	ldi	r22, 0x00	; 0
 cbc:	08 95       	ret

00000cbe <__fp_nan>:
 cbe:	9f ef       	ldi	r25, 0xFF	; 255
 cc0:	80 ec       	ldi	r24, 0xC0	; 192
 cc2:	08 95       	ret

00000cc4 <__fp_pscA>:
 cc4:	00 24       	eor	r0, r0
 cc6:	0a 94       	dec	r0
 cc8:	16 16       	cp	r1, r22
 cca:	17 06       	cpc	r1, r23
 ccc:	18 06       	cpc	r1, r24
 cce:	09 06       	cpc	r0, r25
 cd0:	08 95       	ret

00000cd2 <__fp_pscB>:
 cd2:	00 24       	eor	r0, r0
 cd4:	0a 94       	dec	r0
 cd6:	12 16       	cp	r1, r18
 cd8:	13 06       	cpc	r1, r19
 cda:	14 06       	cpc	r1, r20
 cdc:	05 06       	cpc	r0, r21
 cde:	08 95       	ret

00000ce0 <__fp_round>:
 ce0:	09 2e       	mov	r0, r25
 ce2:	03 94       	inc	r0
 ce4:	00 0c       	add	r0, r0
 ce6:	11 f4       	brne	.+4      	; 0xcec <__fp_round+0xc>
 ce8:	88 23       	and	r24, r24
 cea:	52 f0       	brmi	.+20     	; 0xd00 <__fp_round+0x20>
 cec:	bb 0f       	add	r27, r27
 cee:	40 f4       	brcc	.+16     	; 0xd00 <__fp_round+0x20>
 cf0:	bf 2b       	or	r27, r31
 cf2:	11 f4       	brne	.+4      	; 0xcf8 <__fp_round+0x18>
 cf4:	60 ff       	sbrs	r22, 0
 cf6:	04 c0       	rjmp	.+8      	; 0xd00 <__fp_round+0x20>
 cf8:	6f 5f       	subi	r22, 0xFF	; 255
 cfa:	7f 4f       	sbci	r23, 0xFF	; 255
 cfc:	8f 4f       	sbci	r24, 0xFF	; 255
 cfe:	9f 4f       	sbci	r25, 0xFF	; 255
 d00:	08 95       	ret

00000d02 <__udivmodhi4>:
 d02:	aa 1b       	sub	r26, r26
 d04:	bb 1b       	sub	r27, r27
 d06:	51 e1       	ldi	r21, 0x11	; 17
 d08:	07 c0       	rjmp	.+14     	; 0xd18 <__udivmodhi4_ep>

00000d0a <__udivmodhi4_loop>:
 d0a:	aa 1f       	adc	r26, r26
 d0c:	bb 1f       	adc	r27, r27
 d0e:	a6 17       	cp	r26, r22
 d10:	b7 07       	cpc	r27, r23
 d12:	10 f0       	brcs	.+4      	; 0xd18 <__udivmodhi4_ep>
 d14:	a6 1b       	sub	r26, r22
 d16:	b7 0b       	sbc	r27, r23

00000d18 <__udivmodhi4_ep>:
 d18:	88 1f       	adc	r24, r24
 d1a:	99 1f       	adc	r25, r25
 d1c:	5a 95       	dec	r21
 d1e:	a9 f7       	brne	.-22     	; 0xd0a <__udivmodhi4_loop>
 d20:	80 95       	com	r24
 d22:	90 95       	com	r25
 d24:	bc 01       	movw	r22, r24
 d26:	cd 01       	movw	r24, r26
 d28:	08 95       	ret

00000d2a <_exit>:
 d2a:	f8 94       	cli

00000d2c <__stop_program>:
 d2c:	ff cf       	rjmp	.-2      	; 0xd2c <__stop_program>
